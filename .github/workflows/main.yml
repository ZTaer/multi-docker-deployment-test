name: CI and Deploy to AWS Elastic Beanstalk

# 定义触发条件
on:
  push:
    branches:
      - main # 当推送到 main 分支时触发
  pull_request:
    branches:
      - main # 当有 pull request 指向 main 分支时触发
  workflow_dispatch: # 允许手动触发工作流
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest # 指定使用的运行环境为 Ubuntu 最新版本
    steps:
      # 步骤 1: 检出代码仓库
      - name: Checkout code
        uses: actions/checkout@v3 # 使用 GitHub 官方动作检出代码

      # 步骤 2: 登录 Docker Hub
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        # 使用 GitHub Secrets 中存储的 Docker Hub 凭据登录

      # 步骤 3: 构建并测试客户端 Docker 镜像
      - name: Build and Test Client Docker Image
        run: |
          docker build -t ztaer/multi-docker-deployment-test -f ./client/Dockerfile.dev ./client
          docker run -e CI=true ztaer/multi-docker-deployment-test npm test
        # 构建客户端测试镜像并运行测试，确保代码没有破坏

      # 步骤 4: 运行 Docker Compose 并构建镜像和启动容器
      - name: Run Docker Compose with Environment Variables
        run: docker-compose up -d --build
        env:
          REDIS_HOST: multi-docker-redis.yksahy.ng.0001.ape1.cache.amazonaws.com # Redis 服务的主机名
          REDIS_PORT: 6379 # Redis 服务的端口
          POSTGRES_USER: postgres # PostgreSQL 用户名
          POSTGRES_PASSWORD: a3979897 # PostgreSQL 用户密码
          POSTGRES_HOST: multi-docker-postgres.cb4msqs4ip0s.ap-east-1.rds.amazonaws.com # PostgreSQL 服务的主机名
          POSTGRES_PORT: 5432 # PostgreSQL 服务的端口
          POSTGRES_DATABASE: postgres # PostgreSQL 数据库名
      # 步骤 5: 推送 Docker Compose 构建的镜像到 Docker Hub
      - name: Push Docker Compose Images
        run: |
          docker-compose push
        # 将通过 docker-compose 构建的所有镜像推送到 Docker Hub

      # 步骤 6: 生成部署包
      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'
        # 将项目打包为一个 zip 文件，排除 .git 目录

      # 步骤 7: 部署到 AWS Elastic Beanstalk
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS 访问密钥 ID
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS 密钥
          application_name: ${{ vars.AWS_APPLICATION_NAME }} # Elastic Beanstalk 应用名称
          environment_name: ${{ vars.AWS_ENVIRONMENT_NAME }} # Elastic Beanstalk 环境名称
          existing_bucket_name: ${{ vars.AWS_EXISTING_BUCKET_NAME }} # 用于存储部署包的 S3 存储桶
          region: ${{ vars.AWS_REGION }} # 部署的 AWS 区域
          version_label: multi-deploy-${{ github.run_number }} # 部署版本的标签，包含运行编号
          deployment_package: deploy.zip # 部署使用的包文件
          use_existing_version_if_available: true # 如果相同版本存在，使用已存在的版本
        # 使用指定的 AWS 凭据和配置信息，将生成的部署包部署到 AWS Elastic Beanstalk 中
