version: "3.9" # Docker Compose 文件版本

services:
  db:
    image: postgres # 使用官方的 PostgreSQL 镜像
    restart: always # 容器崩溃或 Docker 重启时自动重启容器
    shm_size: 128mb # 设置共享内存大小为 128MB
    environment:
      POSTGRES_PASSWORD: example # 设置 PostgreSQL 数据库的用户密码
    volumes:
      - db-data:/var/lib/postgresql/data # 将名为 db-data 的卷挂载到容器的 /var/lib/postgresql/data 目录

  redis:
    image: redis:7 # 使用官方的 Redis 7 镜像

  api:
    build:
      dockerfile: Dockerfile.dev # 指定 Dockerfile 文件
      context: ./server # 指定构建上下文目录
    volumes:
      - /app/node_modules # 挂载 node_modules 目录，防止覆盖
      - ./server:/app # 将本地 server 目录挂载到容器内的 /app 目录
    environment:
      - REDIS_HOST=redis # Redis 服务的主机名
      - REDIS_PORT=6379 # Redis 服务的端口
      - POSTGRES_USER=postgres # PostgreSQL 用户名
      - POSTGRES_PASSWORD=example # PostgreSQL 用户密码
      - POSTGRES_HOST=db # PostgreSQL 服务的主机名
      - POSTGRES_PORT=5432 # PostgreSQL 服务的端口
      - POSTGRES_DATABASE=postgres # PostgreSQL 数据库名

  worker:
    build:
      dockerfile: Dockerfile.dev # 指定 Dockerfile 文件
      context: ./worker # 指定构建上下文目录
    volumes:
      - /app/node_modules # 挂载 node_modules 目录，防止覆盖
      - ./worker:/app # 将本地 worker 目录挂载到容器内的 /app 目录
    environment:
      - REDIS_HOST=redis # Redis 服务的主机名
      - REDIS_PORT=6379 # Redis 服务的端口

  client:
    build:
      dockerfile: Dockerfile.dev # 指定 Dockerfile 文件
      context: ./client # 指定构建上下文目录
    volumes:
      - /app/node_modules # 挂载 node_modules 目录，防止覆盖
      - ./client:/app # 将本地 client 目录挂载到容器内的 /app 目录
    environment:
      - WDS_SOCKET_PORT=0 # 兼容 socket 端口

  nginx:
    image: nginx:1.27.0 # 使用指定版本的 Nginx 镜像
    depends_on:
      - api # 依赖 api 服务
      - client # 依赖 client 服务
    restart: always # 容器崩溃或 Docker 重启时自动重启容器
    build:
      dockerfile: Dockerfile.dev # 指定 Dockerfile 文件
      context: ./nginx # 指定构建上下文目录
    ports:
      - "3050:80" # 将主机的 3050 端口映射到容器的 80 端口

volumes:
  db-data: # 定义名为 db-data 的卷，Docker 将管理其存储
